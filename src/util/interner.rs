//! A string interner

use std::collections::HashMap;

use rc::Rc;

/// An interned string
#[derive(Copy, Clone, Debug, Eq, Hash, PartialEq)]
pub struct Name(usize);

/// A string interner
pub struct Interner {
    count: usize,
    map: HashMap<Rc<str>, Name>,
    vec: Vec<Rc<str>>,
}

impl Interner {
    /// A new string interner
    pub fn new() -> Interner {
        Interner {
            count: 0,
            map: HashMap::new(),
            vec: vec![],
        }
    }

    /// Retrieves an interned string
    pub fn get(&self, name: &Name) -> Rc<str> {
        match self.vec.get(name.0) {
            // NB `Name`s generated by `intern()` are always valid indices
            None => unreachable!(),
            Some(rcstr) => rcstr.clone(),
        }
    }

    /// Interns a string
    pub fn intern(&mut self, string: &str) -> Name {
        if let Some(name) = self.map.get(string) {
            return name.clone();
        }

        let name = Name(self.count);
        let rc_str = Rc::from(string);

        self.count += 1;
        self.map.insert(rc_str.clone(), name);
        self.vec.push(rc_str);

        name
    }
}
